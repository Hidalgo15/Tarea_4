@page "/entidad/{tipo}"
@inject NavigationManager NavMan
@inject SerieContext Sc
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore;
<h1 class="text-center">@Tipo</h1>

<div class="text-end me-3">
    <buttom class="btn btn-primary" @onclick="Agregar">Agregar @Tipo</buttom>
</div>

<p><strong>Agregados</strong></p>

<table class="table">
    <thead>
        <tr>
            <th>Nombre</th>
            <th>Pais</th>
            <th>Idioma</th>
            <th>Resumen</th>
            <th>Foto</th>
        </tr>
    </thead>

    <tbody>
        @foreach(var item in Lista){
         <tr>
            <td>@item.Nombre</td>
            <td>@item.Pais</td>
            <td>@item.Lenguage</td>
            <td>@item.Resumen</td>
            <td><img src ="@item.PhotoUrl" alt ="@item.Nombre" width="100"/> </td>
        </tr>
        }

    </tbody>

</table>




@code{
    
    [Parameter]

    public string Tipo {get; set;} = "";
    List<SeriePeliculasLibro> Lista = new List<SeriePeliculasLibro>();

    Tipo_Entidad Entidad_Tipo;

    protected override void OnParametersSet(){
        switch(Tipo){
            case "libro":
            Entidad_Tipo = Tipo_Entidad.Libro;
            break;
            case "pelicula":
            Entidad_Tipo = Tipo_Entidad.Pelicula;
            break;
            case "serie":
            Entidad_Tipo = Tipo_Entidad.Serie;
            break;
        }
    }

    private void Agregar(){
        NavMan.NavigateTo($"entidad/{Tipo}/editar");
    }
protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {
        Console.WriteLine($"Valor de Entidad_Tipo: {Entidad_Tipo}");
        try
        {
            Lista = await Sc.SeriePeliculasLibros
                .Where(x => x.Tipo == Entidad_Tipo)
                .ToListAsync();

            Console.WriteLine($"NÃºmero de elementos en la lista: {Lista.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los datos: {ex.Message}");
        }


        StateHasChanged();
    }
}
}